/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WritingMomentumPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  dailyWordGoal: 500,
  weeklyWordGoal: 3500,
  monthlyWordGoal: 15e3,
  trackingFolders: [],
  excludeFolders: [],
  showStatusBar: true,
  showRibbonIcon: true,
  notifications: true,
  countingMethod: "words"
};
var WordCounter = class {
  static countWords(text) {
    return text.trim().split(/\s+/).filter((word) => word.length > 0).length;
  }
  static countCharacters(text) {
    return text.replace(/\s/g, "").length;
  }
  static count(text, method) {
    return method === "words" ? this.countWords(text) : this.countCharacters(text);
  }
};
var DataManager = class {
  constructor(plugin) {
    this.sessions = [];
    this.goals = [];
    this.streak = { current: 0, longest: 0, lastWritingDay: "" };
    this.plugin = plugin;
  }
  async loadData() {
    const data = await this.plugin.loadData();
    if (data) {
      this.sessions = data.sessions || [];
      this.goals = data.goals || [];
      this.streak = data.streak || { current: 0, longest: 0, lastWritingDay: "" };
    }
  }
  async saveData() {
    await this.plugin.saveData({
      sessions: this.sessions,
      goals: this.goals,
      streak: this.streak
    });
  }
  addSession(session) {
    this.sessions.push(session);
    this.updateStreak();
    this.saveData();
  }
  addGoal(goal) {
    this.goals.push(goal);
    this.saveData();
  }
  getTodaysSessions() {
    const today = new Date().toDateString();
    return this.sessions.filter(
      (session) => new Date(session.start).toDateString() === today
    );
  }
  getTodaysWordCount() {
    return this.getTodaysSessions().reduce((total, session) => total + session.wordCount, 0);
  }
  getActiveGoals() {
    return this.goals.filter((goal) => goal.active);
  }
  getStreak() {
    return this.streak;
  }
  updateStreak() {
    const today = new Date().toDateString();
    const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1e3).toDateString();
    if (this.streak.lastWritingDay === today) {
      return;
    }
    if (this.streak.lastWritingDay === yesterday) {
      this.streak.current++;
    } else if (this.streak.lastWritingDay !== today) {
      this.streak.current = 1;
    }
    this.streak.lastWritingDay = today;
    if (this.streak.current > this.streak.longest) {
      this.streak.longest = this.streak.current;
    }
  }
};
var VIEW_TYPE_WRITING_DASHBOARD = "writing-dashboard";
var WritingDashboardView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_WRITING_DASHBOARD;
  }
  getDisplayText() {
    return "Writing Dashboard";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h2", { text: "Writing Dashboard" });
    this.renderStats(container);
    this.renderGoals(container);
    this.renderStreak(container);
  }
  renderStats(container) {
    const statsContainer = container.createEl("div", { cls: "writing-stats" });
    statsContainer.createEl("h3", { text: "Today's Progress" });
    const todaysCount = this.plugin.dataManager.getTodaysWordCount();
    const dailyGoal = this.plugin.settings.dailyWordGoal;
    const progress = Math.min(todaysCount / dailyGoal * 100, 100);
    statsContainer.createEl("p", { text: `Words written: ${todaysCount}/${dailyGoal}` });
    statsContainer.createEl("p", { text: `Progress: ${progress.toFixed(1)}%` });
  }
  renderGoals(container) {
    const goalsContainer = container.createEl("div", { cls: "writing-goals" });
    goalsContainer.createEl("h3", { text: "Active Goals" });
    const activeGoals = this.plugin.dataManager.getActiveGoals();
    if (activeGoals.length === 0) {
      goalsContainer.createEl("p", { text: "No active goals. Set one to get started!" });
    } else {
      activeGoals.forEach((goal) => {
        goalsContainer.createEl("p", { text: `${goal.name}: ${goal.target} ${this.plugin.settings.countingMethod}` });
      });
    }
  }
  renderStreak(container) {
    const streakContainer = container.createEl("div", { cls: "writing-streak" });
    streakContainer.createEl("h3", { text: "Writing Streak" });
    const streak = this.plugin.dataManager.getStreak();
    streakContainer.createEl("p", { text: `Current streak: ${streak.current} days` });
    streakContainer.createEl("p", { text: `Longest streak: ${streak.longest} days` });
  }
  async onClose() {
  }
};
var WritingMomentumPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.currentSession = null;
  }
  async onload() {
    await this.loadSettings();
    this.dataManager = new DataManager(this);
    await this.dataManager.loadData();
    this.registerView(
      VIEW_TYPE_WRITING_DASHBOARD,
      (leaf) => new WritingDashboardView(leaf, this)
    );
    if (this.settings.showRibbonIcon) {
      this.addRibbonIcon("target", "Writing Momentum", () => {
        this.activateView();
      });
    }
    if (this.settings.showStatusBar) {
      this.statusBarItem = this.addStatusBarItem();
      this.updateStatusBar();
    }
    this.addCommand({
      id: "open-writing-dashboard",
      name: "Open Writing Dashboard",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "start-writing-session",
      name: "Start Writing Session",
      callback: () => {
        this.startWritingSession();
      }
    });
    this.addCommand({
      id: "end-writing-session",
      name: "End Writing Session",
      callback: () => {
        this.endWritingSession();
      }
    });
    this.addSettingTab(new WritingMomentumSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        if (file && this.shouldTrackFile(file)) {
          this.startAutoSession(file);
        }
      })
    );
    this.registerInterval(
      window.setInterval(() => {
        this.updateStatusBar();
      }, 3e4)
    );
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_WRITING_DASHBOARD);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      const rightLeaf = workspace.getRightLeaf(false);
      if (rightLeaf) {
        leaf = rightLeaf;
        await leaf.setViewState({ type: VIEW_TYPE_WRITING_DASHBOARD, active: true });
      } else {
        return;
      }
    }
    workspace.revealLeaf(leaf);
  }
  shouldTrackFile(file) {
    if (this.settings.trackingFolders.length === 0) {
      return true;
    }
    for (const folder of this.settings.excludeFolders) {
      if (file.path.startsWith(folder)) {
        return false;
      }
    }
    for (const folder of this.settings.trackingFolders) {
      if (file.path.startsWith(folder)) {
        return true;
      }
    }
    return this.settings.trackingFolders.length === 0;
  }
  startAutoSession(file) {
    if (!this.currentSession) {
      this.startWritingSession([file.path]);
    }
  }
  startWritingSession(files = []) {
    if (this.currentSession) {
      this.endWritingSession();
    }
    this.currentSession = {
      id: Date.now().toString(),
      start: Date.now(),
      wordCount: 0,
      files
    };
    new import_obsidian.Notice("Writing session started!");
  }
  endWritingSession() {
    if (!this.currentSession) {
      return;
    }
    this.currentSession.end = Date.now();
    this.currentSession.wordCount = this.calculateSessionWordCount();
    this.dataManager.addSession(this.currentSession);
    const duration = Math.round((this.currentSession.end - this.currentSession.start) / 6e4);
    new import_obsidian.Notice(`Session ended! Wrote ${this.currentSession.wordCount} words in ${duration} minutes.`);
    this.currentSession = null;
  }
  calculateSessionWordCount() {
    var _a;
    let totalWords = 0;
    for (const filePath of ((_a = this.currentSession) == null ? void 0 : _a.files) || []) {
      const file = this.app.vault.getAbstractFileByPath(filePath);
      if (file instanceof import_obsidian.TFile) {
        this.app.vault.cachedRead(file).then((content) => {
          totalWords += WordCounter.count(content, this.settings.countingMethod);
        });
      }
    }
    return totalWords;
  }
  updateStatusBar() {
    if (!this.statusBarItem)
      return;
    const todaysCount = this.dataManager.getTodaysWordCount();
    const dailyGoal = this.settings.dailyWordGoal;
    const progress = Math.min(todaysCount / dailyGoal * 100, 100);
    this.statusBarItem.setText(`${todaysCount}/${dailyGoal} words (${progress.toFixed(0)}%)`);
  }
  onunload() {
    if (this.currentSession) {
      this.endWritingSession();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateStatusBar();
  }
};
var WritingMomentumSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Writing Momentum Settings" });
    new import_obsidian.Setting(containerEl).setName("Daily word goal").setDesc("Target number of words to write each day").addText((text) => text.setPlaceholder("500").setValue(this.plugin.settings.dailyWordGoal.toString()).onChange(async (value) => {
      this.plugin.settings.dailyWordGoal = parseInt(value) || 500;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Weekly word goal").setDesc("Target number of words to write each week").addText((text) => text.setPlaceholder("3500").setValue(this.plugin.settings.weeklyWordGoal.toString()).onChange(async (value) => {
      this.plugin.settings.weeklyWordGoal = parseInt(value) || 3500;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Monthly word goal").setDesc("Target number of words to write each month").addText((text) => text.setPlaceholder("15000").setValue(this.plugin.settings.monthlyWordGoal.toString()).onChange(async (value) => {
      this.plugin.settings.monthlyWordGoal = parseInt(value) || 15e3;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Counting method").setDesc("Choose whether to count words or characters").addDropdown((dropdown) => dropdown.addOption("words", "Words").addOption("characters", "Characters").setValue(this.plugin.settings.countingMethod).onChange(async (value) => {
      this.plugin.settings.countingMethod = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show status bar").setDesc("Display writing progress in the status bar").addToggle((toggle) => toggle.setValue(this.plugin.settings.showStatusBar).onChange(async (value) => {
      this.plugin.settings.showStatusBar = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show ribbon icon").setDesc("Display plugin icon in the left ribbon").addToggle((toggle) => toggle.setValue(this.plugin.settings.showRibbonIcon).onChange(async (value) => {
      this.plugin.settings.showRibbonIcon = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Enable notifications").setDesc("Show notifications for achievements and reminders").addToggle((toggle) => toggle.setValue(this.plugin.settings.notifications).onChange(async (value) => {
      this.plugin.settings.notifications = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
